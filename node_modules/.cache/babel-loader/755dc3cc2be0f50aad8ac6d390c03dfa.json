{"ast":null,"code":"'use strict';\n\nimport _regeneratorRuntime from \"/home/yurzorea/Documents/Projects/Evoke/Athena/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/yurzorea/Documents/Projects/Evoke/Athena/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar https = require('https');\n\nvar accessKey = 'd3971e6add024986bb77bf0564c9f2d7';\nvar uri = 'canadacentral.api.cognitive.microsoft.com';\nvar path = '/text/analytics/v2.0/keyPhrases';\nvar keyPhrases = \"\";\n\nfunction getKeyPhrases(_x, _x2) {\n  return _getKeyPhrases.apply(this, arguments);\n}\n\nfunction _getKeyPhrases() {\n  _getKeyPhrases = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(sentence, answer) {\n    var documents, len, score, i;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            console.log(\"in the key phrases function!\");\n            documents = {\n              'documents': [{\n                'id': '1',\n                'language': 'en',\n                'text': sentence\n              }]\n            };\n            console.log(\"documents defined\");\n            _context.next = 5;\n            return get_key_phrases(documents);\n\n          case 5:\n            console.log(\"key phrases obtained\");\n            len = keyPhrases.length;\n            score = 0;\n\n            for (i = 0; i < len; i++) {\n              if (answer.indexOf(keyPhrases[i]) >= 0) {\n                score++;\n              }\n            }\n\n            return _context.abrupt(\"return\", score);\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getKeyPhrases.apply(this, arguments);\n}\n\nfunction get_key_phrases(documents) {\n  return new Promise(function (resolve, reject) {\n    var body = JSON.stringify(documents);\n    var request_params = {\n      method: 'POST',\n      hostname: uri,\n      path: path,\n      headers: {\n        'Ocp-Apim-Subscription-Key': accessKey\n      }\n    };\n    var req = https.request(request_params, function (response) {\n      var body = '';\n      response.on('data', function (d) {\n        body += d;\n      });\n      response.on('end', function () {\n        var body_ = JSON.parse(body);\n        var body__ = JSON.stringify(body_, null, '  ');\n        keyPhrases = body_.documents[0].keyPhrases;\n        resolve(keyPhrases);\n      });\n      response.on('error', function (e) {\n        console.log('Error: ' + e.message);\n      });\n    });\n    req.write(body);\n    req.end();\n  });\n}\n\nexport { getKeyPhrases };","map":{"version":3,"sources":["/home/yurzorea/Documents/Projects/Evoke/Athena/src/textapi.js"],"names":["https","require","accessKey","uri","path","keyPhrases","getKeyPhrases","sentence","answer","console","log","documents","get_key_phrases","len","length","score","i","indexOf","Promise","resolve","reject","body","JSON","stringify","request_params","method","hostname","headers","req","request","response","on","d","body_","parse","body__","e","message","write","end"],"mappings":"AAAA;;;;;AAEA,IAAMA,KAAK,GAAGC,OAAO,CAAE,OAAF,CAArB;;AAEA,IAAMC,SAAS,GAAG,kCAAlB;AAEA,IAAMC,GAAG,GAAG,2CAAZ;AACA,IAAMC,IAAI,GAAG,iCAAb;AACA,IAAIC,UAAU,GAAG,EAAjB;;SAEeC,a;;;;;;;2BAAf,iBAA6BC,QAA7B,EAAuCC,MAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AACIC,YAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AACIC,YAAAA,SAFR,GAEoB;AAAE,2BAAa,CAC3B;AAAE,sBAAM,GAAR;AAAa,4BAAY,IAAzB;AAA+B,wBAAQJ;AAAvC,eAD2B;AAAf,aAFpB;AAKIE,YAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AALJ;AAAA,mBAMUE,eAAe,CAAED,SAAF,CANzB;;AAAA;AAOIF,YAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACIG,YAAAA,GARR,GAQcR,UAAU,CAACS,MARzB;AASQC,YAAAA,KATR,GASgB,CAThB;;AAUI,iBAAQC,CAAR,GAAY,CAAZ,EAAeA,CAAC,GAAGH,GAAnB,EAAwBG,CAAC,EAAzB,EAA6B;AACzB,kBAAGR,MAAM,CAACS,OAAP,CAAeZ,UAAU,CAACW,CAAD,CAAzB,KAAiC,CAApC,EAAuC;AACnCD,gBAAAA,KAAK;AACR;AACJ;;AAdL,6CAeWA,KAfX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAkBA,SAASH,eAAT,CAAyBD,SAAzB,EAAoC;AAChC,SAAO,IAAIO,OAAJ,CAAY,UAASC,OAAT,EAAkBC,MAAlB,EAA0B;AACzC,QAAIC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAgBZ,SAAhB,CAAX;AAEA,QAAIa,cAAc,GAAG;AACjBC,MAAAA,MAAM,EAAG,MADQ;AAEjBC,MAAAA,QAAQ,EAAGvB,GAFM;AAGjBC,MAAAA,IAAI,EAAGA,IAHU;AAIjBuB,MAAAA,OAAO,EAAG;AACN,qCAA8BzB;AADxB;AAJO,KAArB;AASA,QAAI0B,GAAG,GAAG5B,KAAK,CAAC6B,OAAN,CAAeL,cAAf,EAA+B,UAACM,QAAD,EAAc;AACnD,UAAIT,IAAI,GAAG,EAAX;AACAS,MAAAA,QAAQ,CAACC,EAAT,CAAa,MAAb,EAAqB,UAAUC,CAAV,EAAa;AAC9BX,QAAAA,IAAI,IAAIW,CAAR;AACH,OAFD;AAGAF,MAAAA,QAAQ,CAACC,EAAT,CAAa,KAAb,EAAoB,YAAY;AAC5B,YAAIE,KAAK,GAAGX,IAAI,CAACY,KAAL,CAAYb,IAAZ,CAAZ;AACA,YAAIc,MAAM,GAAGb,IAAI,CAACC,SAAL,CAAgBU,KAAhB,EAAuB,IAAvB,EAA6B,IAA7B,CAAb;AACA5B,QAAAA,UAAU,GAAG4B,KAAK,CAACtB,SAAN,CAAgB,CAAhB,EAAmBN,UAAhC;AACAc,QAAAA,OAAO,CAACd,UAAD,CAAP;AACH,OALD;AAMAyB,MAAAA,QAAQ,CAACC,EAAT,CAAa,OAAb,EAAsB,UAAUK,CAAV,EAAa;AAC/B3B,QAAAA,OAAO,CAACC,GAAR,CAAa,YAAY0B,CAAC,CAACC,OAA3B;AACH,OAFD;AAGH,KAdS,CAAV;AAeAT,IAAAA,GAAG,CAACU,KAAJ,CAAWjB,IAAX;AACAO,IAAAA,GAAG,CAACW,GAAJ;AACH,GA7BM,CAAP;AA8BH;;AAED,SAASjC,aAAT","sourcesContent":["'use strict';\n\nconst https = require ('https');\n\nconst accessKey = 'd3971e6add024986bb77bf0564c9f2d7';\n\nconst uri = 'canadacentral.api.cognitive.microsoft.com';\nconst path = '/text/analytics/v2.0/keyPhrases';\nvar keyPhrases = \"\";\n\nasync function getKeyPhrases(sentence, answer) {\n    console.log(\"in the key phrases function!\");\n    let documents = { 'documents': [\n        { 'id': '1', 'language': 'en', 'text': sentence }\n    ]};\n    console.log(\"documents defined\");\n    await get_key_phrases (documents);\n    console.log(\"key phrases obtained\");\n    let len = keyPhrases.length;\n    let score = 0;\n    for(var i = 0; i < len; i++) {\n        if(answer.indexOf(keyPhrases[i]) >= 0) {\n            score++;\n        }\n    }\n    return score;\n}\n\nfunction get_key_phrases(documents) {\n    return new Promise(function(resolve, reject) {\n        let body = JSON.stringify (documents);\n\n        let request_params = {\n            method : 'POST',\n            hostname : uri,\n            path : path,\n            headers : {\n                'Ocp-Apim-Subscription-Key' : accessKey,\n            }\n        };\n\n        let req = https.request (request_params, (response) => {\n            let body = '';\n            response.on ('data', function (d) {\n                body += d;\n            });\n            response.on ('end', function () {\n                let body_ = JSON.parse (body);\n                let body__ = JSON.stringify (body_, null, '  ');\n                keyPhrases = body_.documents[0].keyPhrases;\n                resolve(keyPhrases);\n            });\n            response.on ('error', function (e) {\n                console.log ('Error: ' + e.message);\n            });\n        });\n        req.write (body);\n        req.end ();\n    });\n}\n\nexport { getKeyPhrases };\n"]},"metadata":{},"sourceType":"module"}