{"version":3,"sources":["fire.js","App.js","serviceWorker.js","index.js"],"names":["fire","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","auth","GoogleAuthProvider","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","answerOne","handleQuestionOne","bind","assertThisInitialized","e","setState","target","value","console","log","database","ref","set","answer","react_default","a","createElement","className","style","fontFamily","class","background-color","height","top","padding","color","font-family","src","width","font-size","id","placeholder","onChange","required","onClick","handleSubmitOne","align","type","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uNASIA,EAAOC,IAASC,cARP,CACTC,OAAQ,0CACRC,WAAY,kCACZC,YAAa,yCACbC,UAAW,kBACXC,cAAe,8BACfC,kBAAmB,iBAKRR,GAFKC,IAASQ,OACL,IAAIR,IAASQ,KAAKC,mBAC3BV,GC4CAW,cAnDf,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAChBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CAACC,UAAU,IACtBR,EAAKS,kBAAoBT,EAAKS,kBAAkBC,KAAvBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KAHXA,iFAMEY,GAChBT,KAAKU,SAAS,CAACL,UAAWI,EAAEE,OAAOC,QACnCC,QAAQC,IAAId,KAAKI,MAAMC,mDAGTI,GAEdxB,EAAS8B,WAAWC,IAAI,gBAAgBC,IAAI,CAC1CC,OAAQlB,KAAKI,MAAMC,6CAKrB,OACEc,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MAAMC,MAAS,CAACC,WAAY,WACzCL,EAAAC,EAAAC,cAAA,OAAKI,MAAM,MAAMF,MAAO,CAACG,mBAAoB,UAAWC,OAAU,MAAOC,IAAM,MAC7ET,EAAAC,EAAAC,cAAA,OAAKI,MAAM,qBAAqBF,MAAO,CAACM,QAAW,KAAMC,MAAQ,UAAWC,cAAe,WACzFZ,EAAAC,EAAAC,cAAA,OAAKW,IAAI,iBAAiBT,MAAO,CAACU,MAAQ,MAAON,OAAS,SACxDR,EAAAC,EAAAC,cAAA,OAAKI,MAAM,kBAAkBF,MAAO,CAACW,YAAa,SAAlD,WAEEf,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKE,MAAO,CAACW,YAAa,SAA1B,cAMVf,EAAAC,EAAAC,cAAA,OAAKI,MAAQ,gBACXN,EAAAC,EAAAC,cAAA,OAAKI,MAAO,cACVN,EAAAC,EAAAC,cAAA,OAAKI,MAAQ,OAAb,yBAGAN,EAAAC,EAAAC,cAAA,OAAKI,MAAQ,OACXN,EAAAC,EAAAC,cAAA,OAAKI,MAAO,SAASF,MAAO,CAACM,QAAS,OACpCV,EAAAC,EAAAC,cAAA,SAAOI,MAAM,eAAeU,GAAG,YAAYC,YAAY,yBAAyBC,SAAUrC,KAAKM,kBAAmBM,MAAOZ,KAAKI,MAAMC,UAAWkB,MAAQ,CAACM,QAAS,MAAOS,UAAQ,MAGpLnB,EAAAC,EAAAC,cAAA,UAAQc,GAAG,gBAAgBV,MAAM,MAAMc,QAASvC,KAAKwC,gBAAiBjB,MAAO,CAACkB,MAAO,SAAUX,MAAO,WAAYY,KAAK,UAAvH,kBA5CMC,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/B,EAAAC,EAAAC,cAAC8B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.30e8ee06.chunk.js","sourcesContent":["import firebase from 'firebase'\nvar config = {\n    apiKey: \"AIzaSyDTD3pOnwl5JYVNJKrBLCcvAo6YwLeBXw8\",\n    authDomain: \"athena-ai-7677d.firebaseapp.com\",\n    databaseURL: \"https://athena-ai-7677d.firebaseio.com\",\n    projectId: \"athena-ai-7677d\",\n    storageBucket: \"athena-ai-7677d.appspot.com\",\n    messagingSenderId: \"863886539764\"\n  };\nvar fire = firebase.initializeApp(config);\nexport const auth = firebase.auth();\nexport const provider = new firebase.auth.GoogleAuthProvider();\nexport default fire","import React, { Component } from 'react';\nimport './App.css';\nimport firebase, { auth, provider } from './fire'\n\nclass App extends Component {\nconstructor(props){\n  super(props)\n  this.state = {answerOne:\"\"}\n    this.handleQuestionOne = this.handleQuestionOne.bind(this)\n}\n\n  handleQuestionOne(e){\n    this.setState({answerOne: e.target.value})\n    console.log(this.state.answerOne)\n  }\n\n  handleSubmitOne(e){\n    //e.preventdefault()\n    firebase.database().ref('questionOne/').set({\n      answer: this.state.answerOne\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\" style = {{fontFamily: \"Roboto\"}}>\n        <div class=\"row\" style={{\"background-color\": \"#048D98\", \"height\": \"80%\", \"top\":\"0\"}}>\n          <div class=\"container col-md-2\" style={{\"padding\": \"1%\", \"color\":\"#ffffff\", \"font-family\": \"Roboto\"}}>\n            <img src=\"logobright.png\" style={{\"width\":\"12%\", \"height\":\"12%\"}}/>\n              <div class=\"vertical-center\" style={{\"font-size\": \"25px\"}}>\n                AthenaAI\n                <br/>\n                  <div style={{\"font-size\": \"13px\"}}>\n                    Student\n                  </div>\n              </div>\n          </div>\n        </div>\n        <div class = \"welcome-body\">\n          <div class =\"form-group\">\n            <div class = \"row\">\n              What is question one?\n            </div>\n            <div class = \"row\">\n              <div class =\"col-10\" style={{padding: \"2%\"}}>\n                <input class=\"form-control\" id=\"answerOne\" placeholder=\"Enter your answer here\" onChange={this.handleQuestionOne} value={this.state.answerOne} style ={{padding: \"1%\"}} required/>\n              </div>\n            </div>\n            <button id=\"submit-button\" class=\"btn\" onClick={this.handleSubmitOne} style={{align: 'center', color: \"#048D98\"}} type=\"submit\">Next</button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}